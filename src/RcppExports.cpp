// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// altpaths
List altpaths(int source, int target, const NumericMatrix regions, const NumericVector dist, const NumericVector trans, int n, int step, const Function f);
RcppExport SEXP _hexmatrix_altpaths(SEXP sourceSEXP, SEXP targetSEXP, SEXP regionsSEXP, SEXP distSEXP, SEXP transSEXP, SEXP nSEXP, SEXP stepSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type regions(regionsSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type trans(transSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type step(stepSEXP);
    Rcpp::traits::input_parameter< const Function >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(altpaths(source, target, regions, dist, trans, n, step, f));
    return rcpp_result_gen;
END_RCPP
}
// neigh
int neigh(int dir, int i, int rows, int cols);
RcppExport SEXP _hexmatrix_neigh(SEXP dirSEXP, SEXP iSEXP, SEXP rowsSEXP, SEXP colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< int >::type cols(colsSEXP);
    rcpp_result_gen = Rcpp::wrap(neigh(dir, i, rows, cols));
    return rcpp_result_gen;
END_RCPP
}
// whichDir
int whichDir(int cur, int other, int rows, int cols);
RcppExport SEXP _hexmatrix_whichDir(SEXP curSEXP, SEXP otherSEXP, SEXP rowsSEXP, SEXP colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type cur(curSEXP);
    Rcpp::traits::input_parameter< int >::type other(otherSEXP);
    Rcpp::traits::input_parameter< int >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< int >::type cols(colsSEXP);
    rcpp_result_gen = Rcpp::wrap(whichDir(cur, other, rows, cols));
    return rcpp_result_gen;
END_RCPP
}
// path
NumericVector path(int to, NumericVector paths);
RcppExport SEXP _hexmatrix_path(SEXP toSEXP, SEXP pathsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type to(toSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type paths(pathsSEXP);
    rcpp_result_gen = Rcpp::wrap(path(to, paths));
    return rcpp_result_gen;
END_RCPP
}
// pathReduce
List pathReduce(const List dist, const List trans, const NumericVector path, const RObject origin, const Function f);
RcppExport SEXP _hexmatrix_pathReduce(SEXP distSEXP, SEXP transSEXP, SEXP pathSEXP, SEXP originSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const List >::type trans(transSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type path(pathSEXP);
    Rcpp::traits::input_parameter< const RObject >::type origin(originSEXP);
    Rcpp::traits::input_parameter< const Function >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(pathReduce(dist, trans, path, origin, f));
    return rcpp_result_gen;
END_RCPP
}
// reachability
List reachability(const NumericVector m, const NumericVector dist, const NumericVector trans, int target);
RcppExport SEXP _hexmatrix_reachability(SEXP mSEXP, SEXP distSEXP, SEXP transSEXP, SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type m(mSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type trans(transSEXP);
    Rcpp::traits::input_parameter< int >::type target(targetSEXP);
    rcpp_result_gen = Rcpp::wrap(reachability(m, dist, trans, target));
    return rcpp_result_gen;
END_RCPP
}
// region
NumericVector region(const NumericVector m, int index);
RcppExport SEXP _hexmatrix_region(SEXP mSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(region(m, index));
    return rcpp_result_gen;
END_RCPP
}
// shiftDown
SEXP shiftDown(SEXP v, const int rows);
RcppExport SEXP _hexmatrix_shiftDown(SEXP vSEXP, SEXP rowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type v(vSEXP);
    Rcpp::traits::input_parameter< const int >::type rows(rowsSEXP);
    rcpp_result_gen = Rcpp::wrap(shiftDown(v, rows));
    return rcpp_result_gen;
END_RCPP
}
// shiftUp
SEXP shiftUp(SEXP v, const int rows);
RcppExport SEXP _hexmatrix_shiftUp(SEXP vSEXP, SEXP rowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type v(vSEXP);
    Rcpp::traits::input_parameter< const int >::type rows(rowsSEXP);
    rcpp_result_gen = Rcpp::wrap(shiftUp(v, rows));
    return rcpp_result_gen;
END_RCPP
}
// shiftRight
SEXP shiftRight(SEXP v, const int rows, const int cols, const int odd);
RcppExport SEXP _hexmatrix_shiftRight(SEXP vSEXP, SEXP rowsSEXP, SEXP colsSEXP, SEXP oddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type v(vSEXP);
    Rcpp::traits::input_parameter< const int >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< const int >::type cols(colsSEXP);
    Rcpp::traits::input_parameter< const int >::type odd(oddSEXP);
    rcpp_result_gen = Rcpp::wrap(shiftRight(v, rows, cols, odd));
    return rcpp_result_gen;
END_RCPP
}
// shiftLeft
SEXP shiftLeft(SEXP v, const int rows, const int cols, const int odd);
RcppExport SEXP _hexmatrix_shiftLeft(SEXP vSEXP, SEXP rowsSEXP, SEXP colsSEXP, SEXP oddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type v(vSEXP);
    Rcpp::traits::input_parameter< const int >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< const int >::type cols(colsSEXP);
    Rcpp::traits::input_parameter< const int >::type odd(oddSEXP);
    rcpp_result_gen = Rcpp::wrap(shiftLeft(v, rows, cols, odd));
    return rcpp_result_gen;
END_RCPP
}
// shortest
List shortest(int source, int target, const NumericVector dist, const NumericVector trans);
RcppExport SEXP _hexmatrix_shortest(SEXP sourceSEXP, SEXP targetSEXP, SEXP distSEXP, SEXP transSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type trans(transSEXP);
    rcpp_result_gen = Rcpp::wrap(shortest(source, target, dist, trans));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_hexmatrix_altpaths", (DL_FUNC) &_hexmatrix_altpaths, 8},
    {"_hexmatrix_neigh", (DL_FUNC) &_hexmatrix_neigh, 4},
    {"_hexmatrix_whichDir", (DL_FUNC) &_hexmatrix_whichDir, 4},
    {"_hexmatrix_path", (DL_FUNC) &_hexmatrix_path, 2},
    {"_hexmatrix_pathReduce", (DL_FUNC) &_hexmatrix_pathReduce, 5},
    {"_hexmatrix_reachability", (DL_FUNC) &_hexmatrix_reachability, 4},
    {"_hexmatrix_region", (DL_FUNC) &_hexmatrix_region, 2},
    {"_hexmatrix_shiftDown", (DL_FUNC) &_hexmatrix_shiftDown, 2},
    {"_hexmatrix_shiftUp", (DL_FUNC) &_hexmatrix_shiftUp, 2},
    {"_hexmatrix_shiftRight", (DL_FUNC) &_hexmatrix_shiftRight, 4},
    {"_hexmatrix_shiftLeft", (DL_FUNC) &_hexmatrix_shiftLeft, 4},
    {"_hexmatrix_shortest", (DL_FUNC) &_hexmatrix_shortest, 4},
    {"run_testthat_tests",      (DL_FUNC) &run_testthat_tests,      1},
    {NULL, NULL, 0}
};

RcppExport void R_init_hexmatrix(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
