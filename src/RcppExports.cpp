// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// altpaths
List altpaths(int source, int target, const NumericVector dist, const NumericMatrix regions, int n, int step, const Function f);
RcppExport SEXP _hexmatrix_altpaths(SEXP sourceSEXP, SEXP targetSEXP, SEXP distSEXP, SEXP regionsSEXP, SEXP nSEXP, SEXP stepSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type regions(regionsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type step(stepSEXP);
    Rcpp::traits::input_parameter< const Function >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(altpaths(source, target, dist, regions, n, step, f));
    return rcpp_result_gen;
END_RCPP
}
// whichDir
int whichDir(int cur, int other, int rows, int cols, int layers);
RcppExport SEXP _hexmatrix_whichDir(SEXP curSEXP, SEXP otherSEXP, SEXP rowsSEXP, SEXP colsSEXP, SEXP layersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type cur(curSEXP);
    Rcpp::traits::input_parameter< int >::type other(otherSEXP);
    Rcpp::traits::input_parameter< int >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< int >::type cols(colsSEXP);
    Rcpp::traits::input_parameter< int >::type layers(layersSEXP);
    rcpp_result_gen = Rcpp::wrap(whichDir(cur, other, rows, cols, layers));
    return rcpp_result_gen;
END_RCPP
}
// path
NumericVector path(int to, NumericVector paths);
RcppExport SEXP _hexmatrix_path(SEXP toSEXP, SEXP pathsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type to(toSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type paths(pathsSEXP);
    rcpp_result_gen = Rcpp::wrap(path(to, paths));
    return rcpp_result_gen;
END_RCPP
}
// pathReduce
List pathReduce(const List data, const NumericVector path, const RObject origin, const Function f);
RcppExport SEXP _hexmatrix_pathReduce(SEXP dataSEXP, SEXP pathSEXP, SEXP originSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type path(pathSEXP);
    Rcpp::traits::input_parameter< const RObject >::type origin(originSEXP);
    Rcpp::traits::input_parameter< const Function >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(pathReduce(data, path, origin, f));
    return rcpp_result_gen;
END_RCPP
}
// reachability
List reachability(const NumericVector m, const NumericVector dist, int target);
RcppExport SEXP _hexmatrix_reachability(SEXP mSEXP, SEXP distSEXP, SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type m(mSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type dist(distSEXP);
    Rcpp::traits::input_parameter< int >::type target(targetSEXP);
    rcpp_result_gen = Rcpp::wrap(reachability(m, dist, target));
    return rcpp_result_gen;
END_RCPP
}
// shortest
List shortest(int source, int target, const NumericVector dist);
RcppExport SEXP _hexmatrix_shortest(SEXP sourceSEXP, SEXP targetSEXP, SEXP distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type dist(distSEXP);
    rcpp_result_gen = Rcpp::wrap(shortest(source, target, dist));
    return rcpp_result_gen;
END_RCPP
}
// region
NumericVector region(const NumericMatrix m, int index);
RcppExport SEXP _hexmatrix_region(SEXP mSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(region(m, index));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hexmatrix_altpaths", (DL_FUNC) &_hexmatrix_altpaths, 7},
    {"_hexmatrix_whichDir", (DL_FUNC) &_hexmatrix_whichDir, 5},
    {"_hexmatrix_path", (DL_FUNC) &_hexmatrix_path, 2},
    {"_hexmatrix_pathReduce", (DL_FUNC) &_hexmatrix_pathReduce, 4},
    {"_hexmatrix_reachability", (DL_FUNC) &_hexmatrix_reachability, 3},
    {"_hexmatrix_shortest", (DL_FUNC) &_hexmatrix_shortest, 3},
    {"_hexmatrix_region", (DL_FUNC) &_hexmatrix_region, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_hexmatrix(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
